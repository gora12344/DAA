#include <iostream>
using namespace std;

// Function to solve 0/1 Knapsack problem
int knapsack(int W, int wt[], int val[], int n) {
    int K[n + 1][W + 1];

    // Build table K[][] in bottom-up manner
    for (int i = 0; i <= n; i++) {
        for (int w = 0; w <= W; w++) {

            // Base case: first row and column are 0
            if (i == 0 || w == 0)
                K[i][w] = 0;

            // If weight of current item is less than or equal to capacity
            else if (wt[i - 1] <= w)
                K[i][w] = max(val[i - 1] + K[i - 1][w - wt[i - 1]], K[i - 1][w]);

            // If item cannot be included
            else
                K[i][w] = K[i - 1][w];
        }
    }

    return K[n][W];
}

int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;

    int val[n], wt[n];
    cout << "Enter value and weight of each item:\n";
    for (int i = 0; i < n; i++)
        cin >> val[i] >> wt[i];

    cout << "Enter capacity of knapsack: ";
    cin >> W;

    cout << "\nMaximum value in knapsack = " << knapsack(W, wt, val, n) << endl;

    return 0;
}
