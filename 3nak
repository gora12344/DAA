#include <iostream>
#include <algorithm>
using namespace std;

// Structure for each item
struct Item {
    int value, weight;
};

// Comparator function to sort items by value/weight ratio
bool cmp(Item a, Item b) {
    double r1 = (double)a.value / a.weight;
    double r2 = (double)b.value / b.weight;
    return r1 > r2; // descending order
}

// Function to calculate maximum value in knapsack
double fractionalKnapsack(int W, Item arr[], int n) {
    // Step 1: Sort items by ratio
    sort(arr, arr + n, cmp);

    double totalValue = 0.0; // total value in knapsack
    int currentWeight = 0;   // current weight in knapsack

    // Step 2: Pick items one by one
    for (int i = 0; i < n; i++) {
        if (currentWeight + arr[i].weight <= W) {
            // take whole item
            currentWeight += arr[i].weight;
            totalValue += arr[i].value;
        } else {
            // take fraction of the remaining item
            int remain = W - currentWeight;
            totalValue += arr[i].value * ((double)remain / arr[i].weight);
            break; // knapsack is full
        }
    }
    return totalValue;
}

int main() {
    int n, W;
    cout << "Enter number of items: ";
    cin >> n;

    Item arr[n];
    cout << "Enter value and weight of each item:\n";
    for (int i = 0; i < n; i++) {
        cin >> arr[i].value >> arr[i].weight;
    }

    cout << "Enter capacity of knapsack: ";
    cin >> W;

    double maxValue = fractionalKnapsack(W, arr, n);
    cout << "\nMaximum value in knapsack = " << maxValue << endl;

    return 0;
}
