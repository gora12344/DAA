#include <iostream>
using namespace std;

#define N 4   // You can change N to any size like 8 for 8-Queens

int board[N][N];

// Function to print the board
void printBoard() {
    for (int i = 0; i < N; i++) {
        for (int j = 0; j < N; j++)
            cout << board[i][j] << " ";
        cout << endl;
    }
    cout << endl;
}

// Function to check if a queen can be placed at board[row][col]
bool isSafe(int row, int col) {
    // Check left side of current row
    for (int i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (int i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (int i = row, j = col; j >= 0 && i < N; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Recursive function to solve N-Queens problem
bool solveNQ(int col) {
    // Base case: all queens are placed
    if (col >= N)
        return true;

    // Try placing queen in each row for this column
    for (int i = 0; i < N; i++) {
        if (isSafe(i, col)) {
            board[i][col] = 1; // Place queen

            // Recurse for next column
            if (solveNQ(col + 1))
                return true;

            // If placing queen doesnâ€™t lead to a solution, remove it
            board[i][col] = 0;
        }
    }

    // If no place is possible in this column
    return false;
}

int main() {
    // Initialize board with 0
    for (int i = 0; i < N; i++)
        for (int j = 0; j < N; j++)
            board[i][j] = 0;

    // Place first queen manually at (0, 0)
    board[0][0] = 1;

    // Try to solve for remaining queens
    if (solveNQ(1))
        printBoard();
    else
        cout << "Solution does not exist";
    
    return 0;
}
